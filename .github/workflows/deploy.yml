name: deploy-frontend
on:
  push: { branches: [ "main" ] }
  workflow_dispatch: {}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions: { contents: read, packages: write }
    env:
      IMAGE: ghcr.io/azenith-solutions/frontend-website-catalog-app
      TAG: ${{ github.sha }}

    steps:
      - uses: actions/checkout@v4

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.IMAGE }}:${{ env.TAG }}

      - name: Setup SSH (key + config)
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          printf "%s\n" "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ci
          chmod 600 ~/.ssh/id_ci
          # SSH config forÃ§a a MESMA chave no bastion e no alvo e usa ProxyCommand
          cat > ~/.ssh/config <<EOF
          Host bastion
            HostName ${${{ secrets.BASTION_IP }}}
            User ${${{ secrets.SERVER_USER }}}
            IdentityFile ~/.ssh/id_ci
            IdentitiesOnly yes
            StrictHostKeyChecking accept-new

          Host target
            HostName ${${{ secrets.SERVER_IP }}}
            User ${${{ secrets.SERVER_USER }}}
            IdentityFile ~/.ssh/id_ci
            IdentitiesOnly yes
            StrictHostKeyChecking accept-new
            ProxyCommand ssh -vv -o IdentitiesOnly=yes -i ~/.ssh/id_ci ${${{ secrets.SERVER_USER }}}@${${{ secrets.BASTION_IP }}} -W %h:%p
          EOF

      - name: Connectivity check (via bastion)
        run: |
          set -euo pipefail
          ssh -vvv target "echo connected"

      - name: Push docker-compose.yml (sem scp/sftp)
        run: |
          set -euo pipefail
          ssh target 'mkdir -p /opt/frontend-site'
          cat ./docker-compose.yml | ssh target 'cat > /opt/frontend-site/docker-compose.yml'

      - name: Deploy
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          ssh target bash -lc "
            set -e
            mkdir -p /opt/frontend-site
            cd /opt/frontend-site
            echo IMAGE_TAG=${GITHUB_SHA} > .env
            echo IMAGE=${IMAGE} >> .env
            docker login ghcr.io -u '${GITHUB_ACTOR}' -p '${GH_TOKEN}'
            docker compose --env-file .env pull
            docker compose --env-file .env up -d
          "
